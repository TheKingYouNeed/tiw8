import { useRef, useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { setCurrentQuestion } from '../store/slices/eventsSlice';
import type { Question } from '../models';
import OneDollar from '../OneDollar';

interface Props {
  eventId: string;
  questions: Question[];
  currentQuestionId: string;
}

const QuestionCanvas = ({ eventId, questions, currentQuestionId }: Props) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [paint, setPaint] = useState(false);
  const [gesture, setGesture] = useState(false);
  const [gesturePoints, setGesturePoints] = useState<[number, number][]>([]);
  const [recognizedGesture, setRecognizedGesture] = useState<string>('');
  const recognizerRef = useRef<any>(null);

  // Initialize the gesture recognizer
  useEffect(() => {
    recognizerRef.current = new OneDollar({
      score: 65, // Seuil de reconnaissance réduit pour une meilleure sensibilité
      parts: 64, // Points à utiliser pour la reconnaissance
      step: 2,   // Étape de rotation
      angle: 45, // Angle de rotation
      size: 250, // Taille de la boîte englobante
    });

    // Modèles de gestes simplifiés et normalisés pour "<" (gauche)
    recognizerRef.current.add('left', [
      [100, 50], [90, 60], [80, 70], [70, 80], [60, 90], [50, 100],
      [60, 110], [70, 120], [80, 130], [90, 140], [100, 150]
    ]);
    
    // Modèle alternatif pour "<"
    recognizerRef.current.add('left', [
      [80, 50], [70, 75], [60, 100], [70, 125], [80, 150]
    ]);
    
    // Modèle alternatif pour "<" plus vertical
    recognizerRef.current.add('left', [
      [100, 10], [80, 50], [50, 100], [80, 150], [100, 190]
    ]);

    // Modèles de gestes simplifiés et normalisés pour ">" (droite)
    recognizerRef.current.add('right', [
      [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100],
      [90, 110], [80, 120], [70, 130], [60, 140], [50, 150]
    ]);
    
    // Modèle alternatif pour ">"
    recognizerRef.current.add('right', [
      [50, 50], [60, 75], [70, 100], [60, 125], [50, 150]
    ]);
    
    // Modèle alternatif pour ">" plus vertical
    recognizerRef.current.add('right', [
      [50, 10], [70, 50], [100, 100], [70, 150], [50, 190]
    ]);

    // Modèles pour les gestes de balayage horizontal
    recognizerRef.current.add('left', [
      [150, 100], [140, 100], [130, 100], [120, 100], [110, 100],
      [100, 100], [90, 100], [80, 100], [70, 100], [60, 100], [50, 100]
    ]);

    recognizerRef.current.add('right', [
      [50, 100], [60, 100], [70, 100], [80, 100], [90, 100],
      [100, 100], [110, 100], [120, 100], [130, 100], [140, 100], [150, 100]
    ]);
  }, []);
  
  // Redraw the canvas
  const redraw = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw gesture path if we're in gesture mode
    if (gesture && gesturePoints.length > 1) {
      ctx.beginPath();
      ctx.strokeStyle = '#3498db';
      ctx.lineWidth = 3;
      
      // Convert normalized points to canvas coordinates
      const firstPoint = gesturePoints[0];
      ctx.moveTo(firstPoint[0] * canvas.width, firstPoint[1] * canvas.height);
      
      for (let i = 1; i < gesturePoints.length; i++) {
        const point = gesturePoints[i];
        ctx.lineTo(point[0] * canvas.width, point[1] * canvas.height);
      }
      
      ctx.stroke();
    }
    
    // Show recognized gesture
    if (recognizedGesture) {
      ctx.font = '24px Arial';
      ctx.fillStyle = recognizedGesture === 'not recognized' ? '#e74c3c' : '#2ecc71';
      ctx.textAlign = 'center';
      ctx.fillText(recognizedGesture, canvas.width / 2, 30);
    }
  };
  
  // Handle recognized gestures
  const handleGestureRecognized = (gestureName: string) => {
    if (!questions || questions.length === 0) return;
    
    // Find the current question index
    const currentIndex = questions.findIndex(q => q.id === currentQuestionId);
    if (currentIndex === -1) return;
    
    let nextIndex = currentIndex;
    
    // Navigate based on gesture
    if (gestureName === 'left') {
      // Go to next question
      nextIndex = (currentIndex + 1) % questions.length;
    } else if (gestureName === 'right') {
      // Go to previous question
      nextIndex = (currentIndex - 1 + questions.length) % questions.length;
    }
    
    // If the index changed, navigate to the new question
    if (nextIndex !== currentIndex) {
      const nextQuestion = questions[nextIndex];
      console.log(`Navigating to question: ${nextQuestion.id}`);
      
      // Update the current question in the store
      dispatch(setCurrentQuestion({
        eventId: eventId,
        questionId: nextQuestion.id
      }));
    }
  };
  
  // Set up canvas and event handlers
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    // Set canvas dimensions
    const updateCanvasSize = () => {
      const rect = canvas.getBoundingClientRect();
      canvas.width = rect.width;
      canvas.height = rect.height;
      redraw();
    };

    updateCanvasSize();
    window.addEventListener('resize', updateCanvasSize);

    const handlePointerDown = (ev: PointerEvent) => {
      // Prevent default to avoid scrolling on touch devices
      ev.preventDefault();
      
      // Get pointer position relative to canvas
      const rect = canvas.getBoundingClientRect();
      const x = (ev.clientX - rect.left) / rect.width;
      const y = (ev.clientY - rect.top) / rect.height;
      
      // Start tracking the gesture
      setPaint(true);
      setGesture(true);
      setGesturePoints([[x, y]]);
      setRecognizedGesture('');
      
      // Capturer le pointeur pour une meilleure expérience tactile
      if (canvas.setPointerCapture) {
        canvas.setPointerCapture(ev.pointerId);
      }
      
      redraw();
    };

    const handlePointerMove = (ev: PointerEvent) => {
      // Only track if we're in painting mode
      if (paint) {
        ev.preventDefault();
        
        const rect = canvas.getBoundingClientRect();
        const x = (ev.clientX - rect.left) / rect.width;
        const y = (ev.clientY - rect.top) / rect.height;
        
        // Add point to gesture
        setGesturePoints(prev => [...prev, [x, y]]);
        redraw();
      }
    };

    const handlePointerUp = (ev: PointerEvent) => {
      // End tracking
      setPaint(false);
      
      // Libérer le pointeur
      if (canvas.releasePointerCapture) {
        try {
          canvas.releasePointerCapture(ev.pointerId);
        } catch (e) {
          console.log('Error releasing pointer capture:', e);
        }
      }
      
      // Process the gesture if we have enough points
      if (gesture && gesturePoints.length > 3) {
        // Convert normalized points to actual canvas coordinates for recognition
        const points = gesturePoints.map(([x, y]) => {
          return [x * canvas.width, y * canvas.height] as [number, number];
        });
        
        // Try to recognize the gesture
        const result = recognizerRef.current.check(points);
        
        if (result && typeof result === 'object') {
          // We have a recognized gesture
          const gestureName = result.name;
          const gestureScore = result.score;
          
          console.log(`Gesture recognized: ${gestureName} (score: ${gestureScore})`);
          
          // Set the recognized gesture name for display
          setRecognizedGesture(gestureName);
          
          // Handle the gesture (e.g., navigate)
          handleGestureRecognized(gestureName);
        } else {
          // No gesture recognized
          console.log('No gesture recognized');
          setRecognizedGesture('not recognized');
        }
        
        // Clear the gesture after a delay to show feedback
        setTimeout(() => {
          setGesture(false);
          setGesturePoints([]);
          setRecognizedGesture('');
          redraw();
        }, 1500); // Augmentation du délai pour mieux voir le feedback
      } else if (gesturePoints.length <= 3) {
        // Trop peu de points pour une reconnaissance fiable
        console.log('Too few points for reliable recognition');
        setGesture(false);
        setGesturePoints([]);
        setRecognizedGesture('');
        redraw();
      }
    };

    // Add event listeners
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointermove', handlePointerMove);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointercancel', handlePointerUp);
    canvas.addEventListener('pointerleave', handlePointerUp);

    // Cleanup
    return () => {
      window.removeEventListener('resize', updateCanvasSize);
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointermove', handlePointerMove);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointercancel', handlePointerUp);
      canvas.removeEventListener('pointerleave', handlePointerUp);
    };
  }, [gesture, gesturePoints, paint, recognizedGesture]);

  return (
    <div className="question-canvas-container">
      <canvas
        ref={canvasRef}
        className="question-canvas"
        style={{
          width: '100%',
          height: '200px',
          border: '1px solid #ccc',
          touchAction: 'none' // Important pour éviter les actions tactiles par défaut
        }}
      />
      {recognizedGesture && (
        <div className="gesture-feedback" style={{ textAlign: 'center', marginTop: '10px' }}>
          Geste reconnu: {recognizedGesture}
        </div>
      )}
    </div>
  );
};

export default QuestionCanvas;
